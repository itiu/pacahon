n3: http://www.w3.org/TeamSubmission/turtle/


для пакетной передачи следует отделять факты содержащиеся в одном сообщении от фактов в другого сообщении



комманды:

---------------------------------------------------------------------------------------------------------------
получить тикет

аргументы:
    - credential - хэш пароля

доступ: доступно всем

пример:

INPUT
{
    id-command:123456 
    	cmd:command cmd:get-ticket;
	cmd:args
		[
		auth:login "sender-uuid";
		auth:credential "FdffeERtJjQ"
		].
}
OUTPUT
{
    id-command:123456 cms:status ok 
    cmd:result 
	[
	auth:ticket "123456-64743-32463-357-346"
	].
}

---------------------------------------------------------------------------------------------------------------
получить граф по шаблону с учетом прав доступа

аргументы:
    - список шаблонов для сопоставления 

доступ: доступно всем

примечание: 
    в данном примере будет выданны все графы принадлежащие онтологии с именем "gost19"
    для получения списка онтологий следует сделать так:
		onto:template
		    [ 
		    onto:name *.
		    ];		
    
    
пример:

INPUT
{
    id-command:123457 
	cmd:command cmd:get-onto;
	cmd:from "sender-uuid";
	cmd:ticket "12345-67890-4322-132345-56754";
	cmd:args
		[
		graph:template
		    [ 
		    onto:name "gost19".
		    onto:graph *.			    
		    ];		
		]    
}
OUTPUT
{

}  

---------------------------------------------------------------------------------------------------------------
загрузить новый граф

аргументы:
    - сохраняемые факты - все кроме субьекта id-command:xxxx и субьектов right:xxxx
    - сразу могут быть сохранены ACL права на субьекты

доступ: перезаписывать     

пример:
INPUT
{
    id-command:123457 
	cmd:command cmd:put;
	cmd:from "sender-uuid";
	cmd:ticket "12345-67890-4322-132345-56754";

    rights:
		
    gost19:externalIdentifer
    	rdf:type owl:DatatypeProperty ;
    	rdfs:subPropertyOf dc:identifier .

    swrc:Organization
    	rdfs:subClassOf
      		[ 
      		rdf:type owl:Restriction ;
            	owl:allValuesFrom xsd:string ;
            	owl:onProperty swrc:name
      		] .
}
OUTPUT
{
    id-command:123457 cmd:status ok.
}


-----------
ядро понимает операции put, get и знает о онтологии ACLS(для работы с правами), ?SWRC(Person)

до выполнения операции производится проверка на доступность ее пользователю
доступность операции так-же может зависить от содержимого сохраняемого или запрашиваемого



1. права назначаются на субьектов ([S]po)
2. охраняемый субьект должен быть типа rdfs:Resource

	pacahon:Put a pacahon:Command ;

3. субьект которому выдаются права должен получить тип acl:Identity
    пример:

	:Christian a foaf:Person ;
	    a acl:Identity ;
	
4. далее можно установить права
    пример:

	:AccessRule1 a acl:ResourceAccessRule ;
	    rdfs:label "Access Privilege" ;
	    rdfs:comment "Represents the privilege to execute command Put" ;
	    acl:hasAccessTo pacahon:Put ;
	    acl:access "execute" ;
	    acl:acessor :Christian, :Michele ;
	    acl:creator :Ivan .

PUT:
нужна возможность задать шаблон для сохраняемого содержимого, либо это вычисляемые права?




* операции должны быть перечислены как субьекты : put, get, ... 
*
* права на доступ к субьектам, без изменений сохраняются в хранилище
* должны быть ограничения на установку и модификацию прав пользователями
* при сохранении фактов можно сразу установить любые права на субьектов без ограничений
*






---------------------------------------------------------------------------------------------------------------
установить права на узлы графа
аргументы:

доступ:
права на операции

пример:

INPUT
{
    id-command:123457 
	cmd:command cmd:set_rights;
	cmd:from "sender-uuid";
	cmd:ticket "12345-67890-4322-132345-56754";
	cmd:args
		[
		
		]  
	
		
}
OUTPUT
{

}  

---------------------------------------------------------------------------------------------------------------
начать транзакцию

описание:
начинает транзакцию и возвращает UID новой транзакции, которым следует маркировать требуемые команды
команды находящиеся в рамках транзакции выполняются? сохраняются?

аргументы:

доступ:

пример:

INPUT
{
    id-command:123457 
	cmd:command cmd:begin_transaction;
	cmd:from "sender-uuid";
	cmd:ticket "12345-67890-4322-132345-56754";
}
OUTPUT
{
    id-command:123457 cmd:status ok.
    cmd:result 
	[
	transaction:uid "123456-64743-32463-357-346"
	].
    
}  

---------------------------------------------------------------------------------------------------------------
завершить транзакцию

описание:
применяет накопленные комманды относящиеся к указанной транзакции

аргументы:

доступ:

пример:

INPUT
{
    id-command:123457 
	cmd:command cmd:commit_transaction;
	cmd:from "sender-uuid";
	cmd:ticket "12345-67890-4322-132345-56754";
}
OUTPUT
{
    id-command:123457 cmd:status ok.
}  
